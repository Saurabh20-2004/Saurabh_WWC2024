#include <iostream>
using namespace std;

const int MOD = 1e9 + 7;

// Function to perform modular exponentiation
long long modExp(long long base, long long exp, long long mod) {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

class Solution {
public:
    int minNonZeroProduct(int p) {
        long long maxElement = (1LL << p) - 1; // 2^p - 1
        long long secondMax = maxElement - 1;  // 2^p - 2
        long long count = (1LL << (p - 1)) - 1; // 2^(p-1) - 1

        // Compute the result using modular arithmetic
        long long powerPart = modExp(secondMax, count, MOD);
        return (maxElement % MOD * powerPart % MOD) % MOD;
    }
};

int main() {
    Solution solution;
    int p;
    cout << "Enter the value of p: ";
    cin >> p;

    cout << "Minimum Non-Zero Product: " << solution.minNonZeroProduct(p) << endl;
    return 0;
}
